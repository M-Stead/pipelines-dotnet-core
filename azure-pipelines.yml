# ASP.NET Core


# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-16.04' # examples of other options: 'macOS-10.13', 'vs2017-win2016'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration Release' # Update this to match your need

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  displayName: PublishBuildArtifacts
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'myWebsiteName'

- task: AzureWebApp@1
  displayName: Deploy Application
  inputs:
    azureSubscription: 'Azure DevOps Connections'
    appName: 'Testwebapp45435'
    package: $(System.ArtifactsDirectory)/**/*.zip

- task: AzureCLI@1
  displayName: Create Storage Account
  inputs:
    azureSubscription: 'Azure DevOps Connections'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az storage account create -g $(ACI_RESOURCE_GROUP) -n $(ACI_STORAGE_ACCOUNT_NAME) -l $(ACI_LOCATION) --sku Standard_LRS
      az storage share create -n $(ACI_SHARE_NAME) --account-name $(ACI_STORAGE_ACCOUNT_NAME)

- task: AzureCLI@1
  displayName: Create OWASP Container
  inputs:
    azureSubscription: 'Azure DevOps Connections'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az storage account keys list -g $(ACI_RESOURCE_GROUP) --account-name $(ACI_STORAGE_ACCOUNT_NAME) --query "[0].value" --output tsv > temp.txt
      STORAGE_KEY='cat temp.txt'
      echo $STORAGE_KEY
      echo $(STORAGE_KEY)
      az container create -g $(ACI_RESOURCE_GROUP) -n $(ACI_INSTANCE_NAME) --image owasp/zap2docker-stable --ip-address public --ports 8080 --azure-file-volume-account-name $(ACI_STORAGE_ACCOUNT_NAME) --azure-file-volume-account-key $STORAGE_KEY --azure-file-volume-share-name $(ACI_SHARE_NAME) --azure-file-volume-mount-path /zap/wrk/ --command-line "zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.key=abcd -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true"

- task: AzureCLI@1
  displayName: Baseline OWASP ZAP Scan
  inputs:
    azureSubscription: 'Azure DevOps Connections'
    scriptLocation: 'inlineScript'
    inlineScript: |
      ZAP_COMMAND="/zap/zap-baseline.py -t $(TARGET_SCAN_ADDRESS) -x OWASP-ZAP-Report.xml"
      az container exec -g $(ACI_RESOURCE_GROUP) -n $(ACI_INSTANCE_NAME) --exec-command $(ZAP_COMMAND)

- task: AzureCLI@1
  displayName: Download ZAP Report
  inputs:
    azureSubscription: 'Azure DevOps Connections'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az storage account keys list -g $(ACI_RESOURCE_GROUP) --account-name $(ACI_STORAGE_ACCOUNT_NAME) --query "[0].value" --output tsv > temp.txt
      STORAGE_KEY='cat temp.txt'
      az storage file download --account-name $(ACI_STORAGE_ACCOUNT_NAME) --account-key $STORAGE_KEY -s $(ACI_SHARE_NAME) -p OWASP-ZAP-Report.xml --dest $SYSTEM_DEFAULTWORKINGDIRECTORY\OWASP-ZAP-Report.xml


